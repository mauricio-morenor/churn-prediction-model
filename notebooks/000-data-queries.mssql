-- Mauricio Moreno
-- Capstone Project
-- SQL queries to extract the data

-- Iteration 2: total sellers and orders
SELECT
    s.ID AS sellerID,
    DATE_TRUNC('day', s.created_at) AS seller_created_at,
    COUNT(DISTINCT o.order_number) AS total_orders,
    CAST(COUNT(DISTINCT CASE WHEN o.state IN ('Completed', 'Distribution', 'Created', 'Dispatched', 'In_process', 'Initial', 'Ordered') THEN o.order_number END) AS FLOAT) /
        NULLIF(COUNT(DISTINCT o.order_number), 0) AS effective_ratio,
    CAST(COUNT(DISTINCT CASE WHEN o.state IN ('RTO_Completed', 'RTO_Delivered', 'RTO_Started') THEN o.order_number END) AS FLOAT) /
        NULLIF(COUNT(DISTINCT o.order_number), 0) AS rto_ratio,
    CAST(COUNT(DISTINCT CASE WHEN o.state IN ('Return_Completed', 'Return_Delivered', 'Return_Distribution', 'Return_Started') THEN o.order_number END) AS FLOAT) /
        NULLIF(COUNT(DISTINCT o.order_number), 0) AS return_ratio,
    CAST(COUNT(DISTINCT CASE WHEN o.state IN ('Cancelled') THEN o.order_number END) AS FLOAT) /
        NULLIF(COUNT(DISTINCT o.order_number), 0) AS cancelled_ratio,
    COUNT(DISTINCT o.department) AS departments_sold,
    COUNT(DISTINCT o.client_id) AS number_of_clients,
    AVG(CASE WHEN o.state IN ('Completed', 'Distribution', 'Created', 'Dispatched', 'In_process', 'Initial', 'Ordered')
            THEN DATE_PART('day', DATE_TRUNC('day', o.status_date) - DATE_TRUNC('day', o.created_at))
        END) AS avg_effective_delivery_days,
    SUM(CASE WHEN o.state IN ('Completed', 'Distribution', 'Created', 'Dispatched', 'In_process', 'Initial', 'Ordered')
            THEN o.earnings
        END) AS total_effective_earnings,
    AVG(CASE WHEN o.state IN ('Completed', 'Distribution', 'Created', 'Dispatched', 'In_process', 'Initial', 'Ordered')
            THEN o.earnings
        END) AS avg_effective_earnings,
    AVG(o.client_price) AS avg_client_price,
    AVG(o.shipping) AS avg_shipment_cost,
    SUM(o.discount) AS total_discount,
    COUNT(DISTINCT CASE WHEN o.state IN ('Completed', 'Distribution', 'Created', 'Dispatched', 'In_process', 'Initial', 'Ordered') AND DATE_TRUNC('month', o.created_at) = '2022-11-01' THEN o.order_number END) as effective_orders_november,
    COUNT(DISTINCT CASE WHEN o.state IN ('Completed', 'Distribution', 'Created', 'Dispatched', 'In_process', 'Initial', 'Ordered') AND DATE_TRUNC('month', o.created_at) = '2022-12-01' THEN o.order_number END) as effective_orders_december,
    COUNT(DISTINCT CASE WHEN o.state IN ('Completed', 'Distribution', 'Created', 'Dispatched', 'In_process', 'Initial', 'Ordered') AND DATE_TRUNC('month', o.created_at) = '2023-01-01' THEN o.order_number END) as effective_orders_january,
    COUNT(DISTINCT CASE WHEN o.state IN ('Completed', 'Distribution', 'Created', 'Dispatched', 'In_process', 'Initial', 'Ordered') AND DATE_TRUNC('month', o.created_at) = '2023-02-01' THEN o.order_number END) as effective_orders_february
FROM new_app.order AS o
LEFT JOIN new_app.seller as s
    ON o.seller_id = s.id
WHERE DATE(s.created_at) >= '2022-10-01'
GROUP BY s.ID, seller_created_at;

-- Iteration 2: target variable
SELECT
    seller_id,
    COUNT(DISTINCT CASE WHEN o.state IN ('Completed', 'Distribution', 'Created', 'Dispatched', 'In_process', 'Initial', 'Ordered') AND DATE_TRUNC('day', created_at) >= '2023-03-30'
        THEN o.order_number END) AS orders_last_month
FROM
    new_app.order AS o
GROUP BY
    seller_id;

-- Aggregates of product and cart item tables, filtered and grouped by sellers:

SELECT
    seller_id,
    AVG(quantity) AS avg_cart_items,
    AVG(vendor_discount) AS avg_vendor_discount,
    COUNT(DISTINCT prod_id) AS number_of_products,
    COUNT(DISTINCT imgs_url) AS number_of_photos,
    COUNT(DISTINCT category_id) AS number_of_categories,
    AVG(product_existence_days) AS average_prod_existence_days
FROM (
    SELECT
        ci.created_at AS cart_item_created_at,
        quantity,
        elenas_discount,
        vendor_discount,
        ci.order_id,
        p.id AS prod_id,
        imgs_url,
        p.category_id,
        audited,
        validated,
        traffic_light,
        o.seller_id,
        p.created_at AS prod_created_at,
        EXTRACT(DAY FROM DATE_TRUNC('day', '2023-04-30'::date) - DATE_TRUNC('day', p.created_at)) AS product_existence_days
    FROM
        new_app.cart_item AS ci
    LEFT JOIN
        new_app.product AS p ON ci.product_id = p.id
    LEFT JOIN
        new_app.order AS o ON ci.order_id = o.id
    LEFT JOIN
        new_app.seller AS s ON o.seller_id = s.id
    WHERE
        DATE(s.created_at) >= '2022-10-01'
) subquery
GROUP BY seller_id;


--Product shared
SELECT
    s.id,
    COUNT(DISTINCT ps.product_id) AS total_products_shared
FROM
    new_app.seller AS s
LEFT JOIN
    new_app.product_shared AS ps ON s.id = ps.seller_id
WHERE
    DATE(s.created_at) >= '2022-10-01'
GROUP BY
    s.id;


-- voucher seller
select
    s.id AS seller_id,
    COUNT(DISTINCT v.id) AS number_of_vouchers
FROM
    new_app.seller AS s
LEFT JOIN
    new_app.voucher_sellers AS v ON s.id = v.seller_id
WHERE
    DATE(s.created_at) >= '2022-10-01'
GROUP BY
    s.id;
	

-- Seller credits:
SELECT
    s.id AS seller_id,
    COUNT(DISTINCT c.id) AS number_of_credits,
    COUNT(DISTINCT c.order_id) AS number_of_used_credits,
    AVG(c.amount) AS avg_credit_amount
FROM
    new_app.seller AS s
LEFT JOIN
    new_app.seller_credits AS c ON s.id = c.seller_id
WHERE
    DATE(s.created_at) >= '2022-10-01'
GROUP BY
    s.id;
	
	
-- Cohort analysis
WITH cohort_items AS (
  SELECT
    DATE_TRUNC('month', S.created_at)::date AS cohort_month,
    S.id AS user_id
  FROM new_app.seller S
  WHERE S.created_at >= '2022-06-01' 
  GROUP BY 1, 2
),
user_activities AS (
  SELECT
    CASE
      WHEN O.seller_id IS NOT NULL THEN O.seller_id
      ELSE S.id
    END AS user_id,
    CAST(EXTRACT(MONTH FROM AGE(O.created_at, C.cohort_month)) AS INTEGER) AS month_number
  FROM new_app.order O
  LEFT JOIN cohort_items C ON O.seller_id = C.user_id
  LEFT JOIN new_app.seller S ON S.id = C.user_id
  GROUP BY 1, 2
),
cohort_size AS (
  SELECT
    cohort_month,
    COUNT(DISTINCT user_id) AS num_users
  FROM cohort_items
  GROUP BY 1
  ORDER BY 1
)
SELECT
  C.cohort_month,
  S.num_users AS total_users,
  A.month_number,
  COUNT(DISTINCT A.user_id) AS retained_users
FROM cohort_items C
LEFT JOIN user_activities A ON C.user_id = A.user_id
LEFT JOIN cohort_size S ON C.cohort_month = S.cohort_month
WHERE C.cohort_month IS NOT NULL
GROUP BY 1, 2, 3
ORDER BY 1, 3;
